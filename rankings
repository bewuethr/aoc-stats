#!/usr/bin/env bash

update_json() {
	local year url
	year=$1
	url="https://adventofcode.com/$year/leaderboard/private/view/$(< boardid).json"
	curl -s -b session="$(< cookie)" "$url" | jq -S '.' > "leaderboards/$year.json.tmp"
	if [[ ! -s leaderboards/$year.json.tmp ]]; then
		echo "Could not get new data from adventofcode.com, session cookie expired?" >&2
		rm "leaderboards/$year.json.tmp"
		exit 1
	fi

	# Compare to current leaderboard and signal in return status if year has to be built
	if cmp -s "leaderboards/$year.json" "leaderboards/$year.json.tmp"; then
		rm -f "leaderboards/$year.json.tmp"
		return 1
	else
		mv "leaderboards/$year.json.tmp" "leaderboards/$year.json"
		return 0
	fi
}

gen_histogram()  {
	local year=$1
	jq -r '.members[].completion_day_level[][].get_star_ts' "leaderboards/$year.json" \
		| sed 's/^/@/' \
		| date -f - '+%H' \
		| sort \
		| uniq -c \
		| awk '{ print $2 "\t" $1 }' > "docs/$year/histodata.tsv"

	gnuplot -c gnuplot/histo.gpi "docs/$year/histodata.tsv" > "docs/$year/histo.svg"
}

gen_submission_stamps()  {
	local year=$1

	# shellcheck disable=SC2016
	# This gets a list of day - star - timestamp:
	jq -r '
		[
			.members[].completion_day_level |
			paths(scalars) as $p |
			getpath($p) as $v |
			($p | map(strings) + [$v]) |
			[(.[0,1] | tonumber), .[3]]
		] | sort | .[] | @tsv
	' "leaderboards/$year.json" > "docs/$year/submission_times.tsv"
}

gen_submission_stamps_day()  {
	local year=$1
	local day=$2
	local basedate

	printf -v basedate '%d-12-%02dT00:00:00-0500' "$year" "$day"

	awk -v day="$day" -v midnight="$(date '+%s' -d "$basedate")" '
		BEGIN { secsinday = 24 * 3600 }
		$1 == day {
			if ($3 - midnight <= secsinday ) {
			if ($2 == 1)
				first[++i] = $3 - midnight
			else
				second[++j] = $3 - midnight
			}
		}
		END {
			for (i = 1; i <= length(first); ++i)
			print first[i] "\t" second[i]
		}
	' "docs/$year/submission_times.tsv"
}

rank_day_star()  {
	local year=$1
	local day=$2
	local star=$3
	local basedate basedate_unix
	local name
	local tstamp1 tstamp2
	local n
	n=$(jq '.members | length' "leaderboards/$year.json")

	printf -v basedate '%d-12-%02dT00:00:00-0500' "$year" "$day"
	basedate_unix=$(date '+%s' -d "$basedate")

	# shellcheck disable=SC2016,SC1004
	jq -r --arg day "$day" --arg star "$star" '
		[.members[]] |
		if $star == "1" then
			map( {name, id, tstamp: .completion_day_level[$day][$star].get_star_ts} )
		else
			map( {
				name,
				id,
				tstamp: .completion_day_level[$day][$star].get_star_ts,
				tstamp1: .completion_day_level[$day]["1"].get_star_ts
			} )
		end |
		sort_by(.tstamp)[] |
		select(.tstamp != null) |
		[.name // ("User #" + .id), .tstamp, .tstamp1 // ""] |
		@tsv
	' "leaderboards/$year.json" \
		| while IFS=$'\t' read -r name tstamp1 tstamp2; do
			printf '%s\t%s\t%s\n' \
				"$name" \
				"$((tstamp1 - basedate_unix))" \
				"${tstamp2:+$((tstamp1 - tstamp2))}"
		done \
		| awk -F '\t' -v n="$n" '
		{
			name[NR] = $1
			time[NR] = $2
			if ($3 != "")
				time1[NR] = $3
		}
		END {
			for (i = 1; i <= NR; ++i) {
				# Rank, name and time for star since midnight
				printf "%2d\t%s\t%3d:%02d:%02d", \
					i, name[i], int(time[i]/3600), int((time[i]%3600)/60), int((time[i]%60))

				# If second star, print time since first star
				if (length(time1)) {
					printf "\t%3d:%02d:%02d", \
						int(time1[i]/3600), int((time1[i]%3600)/60), int((time1[i]%60))
				}

				# Points for local and modified local ranking
				printf "\t%d\t%d\n", n - i + 1, NR - i + 1
			}
		}
	'
}

print_header()  {
	local title=$1
	local re1='Ranking (201.) day ([[:digit:]]+), star ([[:digit:]]+)'
	local re2='Submission times graph, (201.) day ([[:digit:]]+)'
	if [[ $title =~ $re1 ]]; then
		local year=${BASH_REMATCH[1]}
		local day
		printf -v day '%02d' "${BASH_REMATCH[2]}"
		local star=$((BASH_REMATCH[3] == 1 ? 2 : 1))
		local starlink
		printf -v starlink '<a href="day%sstar%d.html">Ranking for star %d</a>' \
			"$day" "$star" "$star"
		local graphlink
		if [[ -s $year/day${day}subm.html ]]; then
			printf -v graphlink ' <a href="day%ssubm.html">Submission graph for day %s</a>' \
				"$day" "${day#0}"
		else
			graphlink=''
		fi
		local linkbar="<p>$starlink$graphlink"
	elif [[ $title =~ $re2 ]]; then
		local year=${BASH_REMATCH[1]}
		local day=${BASH_REMATCH[2]}
		local starlink1
		printf -v starlink1 '<a href="day%02dstar1.html">Ranking for star 1</a>' "$day"
		local starlink2
		printf -v starlink2 '<a href="day%02dstar2.html">Ranking for star 2</a>' "$day"
		local linkbar="<p>$starlink1 $starlink2"
	fi

	if [[ -n $linkbar ]]; then
		local problemlink
		printf -v problemlink '<a href="https://adventofcode.com/%d/day/%d">' "$year" "${day#0}"
		problemlink+='Problem definition</a>'
		linkbar+=" $problemlink</p>"
	fi

	cat <<- EOF
		<!doctype html>
		<html>
		<head>
		<meta charset=utf-8>
		<link rel="stylesheet" href="/aoc-stats/style.css">
		<link rel="shortcut icon" href="/aoc-stats/favicon.png" type="image/x-icon">
		<title>$title</title>
		</head>
		<body>
		<h1>$title</h1>
		$linkbar
	EOF
}

tablify()  {
	local fname=$1
	shift
	local col_headings=("$@")
	local link=${fname##*/}

	awk -v link="$link" -v date="$(date)" '
		BEGIN {
			FS = "\t"
			print "<div><table>"
			print "<tr>"
			print "<th>Rank</th>"
			print "<th>Name</th>"

			# Loop over all but last argument
			for (i = 1; i < ARGC-1; ++i) {
				print "<th>" ARGV[i]  "</th>"
				delete ARGV[i]
			}
			print "</tr>"
		}
		{
			print "<tr>"
			for (i = 1; i <= NF; ++i)
				print "<td>" $i "</td>"
			print "</tr>"
		}
		END {
			print "</table></div>"
			print "<p><a href=\"index.html\">Return to index</a></p>"
			print "<p class=\"tstamp\">Last updated " date "</p>"
		}
	' "${col_headings[@]}" "$fname"
}

gen_tsv_files()  {
	local year=$1
	local day
	local star

	for day in {01..25}; do
		for star in 1 2; do
			rank_day_star "$year" "${day#0}" "$star" > "docs/$year/day${day}star$star.tsv"
		done
		gen_submission_stamps_day "$year" "${day#0}" > "docs/$year/day${day}subm.tsv"

		# Throw away empty file
		[[ -s docs/$year/day${day}subm.tsv ]] || rm -f "docs/$year/day${day}subm.tsv"
	done
}

gen_subm_graphs()  {
	local year=$1
	local day

	for day in {01..25}; do
		[[ -e docs/$year/day${day}subm.tsv ]] || continue
		gnuplot -c gnuplot/submtime.gpi "docs/$year/day${day}subm.tsv" > "docs/$year/day${day}subm.svg"
	done
}

gen_local_score()  {
	local year=$1
	local n
	n=$(jq '.members | length' "leaderboards/$year.json")
	awk -v n="$n" '
		BEGIN {
			FS = "\t"
			PROCINFO["sorted_in"] = "@val_num_desc"
		}
		{ rank[$2][FILENAME] = $1 }
		END {
			for (i in rank)
				for (j in rank[i])
					score[i] += n - rank[i][j] + 1
			for (i in score)
				printf "%d\t%s\t%d\n", ++ranking, i, score[i]
		}
	' "docs/$year"/day??star?.tsv > "docs/$year/local_score.tsv"
}

gen_mod_local_score()  {
	local year=$1
	awk '
		BEGIN {
			FS = "\t"
			PROCINFO["sorted_in"] = "@val_num_desc"
		}
		{ rank[$2] = $1 }
		ENDFILE {
			for (i in rank)
				score[i] += FNR - rank[i] + 1
			delete rank
		}
		END {
			for (i in score)
				printf "%d\t%s\t%d\n", ++ranking, i, score[i]
		}
	' "docs/$year"/day??star?.tsv > "docs/$year/mod_local_score.tsv"
}

gen_html_files()  {
	local year=$1

	local star_tab_headers=(
		'Time to solve [h:m:s]'
		'Local score'
		'Mod. local score'
	)

	local star2_tab_headers=(
		'Time to solve [h:m:s]'
		'Time since star 1 [h:m:s]'
		'Local score'
		'Mod. local score'
	)

	local re='day([0-9]+)star([0-9])'
	local fname
	local day
	local star

	for fname in "docs/$year"/day*star*.tsv; do
		[[ $fname =~ $re ]]
		day=${BASH_REMATCH[1]}
		star=${BASH_REMATCH[2]}

		{
			print_header "Ranking $year day ${day#0}, star $star"
			if ((star == 1)); then
				tablify "$fname" "${star_tab_headers[@]}"
			else
				tablify "$fname" "${star2_tab_headers[@]}"
			fi
		} | tidy "${tidyopts[@]}" > "${fname%.tsv}.html"
	done

	for day in {01..25}; do
		fname=day${day}subm.svg
		[[ -s docs/$year/$fname ]] || continue

		{
			print_header "Submission times graph, $year day ${day#0}"
			cat <<- EOF
				<img src="$fname" alt="$year submission times day $day">
				<p><a href="index.html">Return to index</a></p>
				<p class="tstamp">Last updated $(date)</p>
			EOF
		} | tidy "${tidyopts[@]}" > "docs/$year/${fname%svg}html"
	done

	{
		print_header "$year local score"
		echo "<p>For each star, winner gets one point per participant, runner-up one less etc.</p>"
		tablify "docs/$year/local_score.tsv" 'Points'
	} | tidy "${tidyopts[@]}" > "docs/$year/local_score.html"

	{
		print_header "$year modified local score"
		printf '<p>%s<em>%s</em>%s</p>\n' \
			"For each start, winner gets one point per submission " \
			"to that star" \
			", runner-up one less etc."
		tablify "docs/$year/mod_local_score.tsv" 'Points'
	} | tidy "${tidyopts[@]}" > "docs/$year/mod_local_score.html"

	{
		print_header "$year histogram of submission times"
		cat <<- EOF
			<img src="histo.svg" alt="$year histogram of submission times">
			<p><a href="index.html">Return to index</a></p>
			<p class="tstamp">Last updated $(date)</p>
		EOF
	} | tidy "${tidyopts[@]}" > "docs/$year/histo.html"

	{
		print_header "$year running total over time"
		cat <<- EOF
			<img src="time_vs_points.svg" alt="$year running total over time">
			<p><a href="index.html">Return to index</a></p>
			<p class="tstamp">Last updated $(date)</p>
		EOF
	} | tidy "${tidyopts[@]}" > "docs/$year/over_time.html"
}

gen_index()  {
	local year=$1
	local histo_link over_time_link
	{
		print_header "Advent of Code $year, IX Stats"
		if [[ -s docs/$year/histo.svg ]]; then
			histo_link='<li><p><a href="histo.html">Histogram of submission times</a></p></li>'
		else
			histo_link=''
		fi

		if [[ -s docs/$year/time_vs_points.svg ]]; then
			over_time_link='<li><p><a href="over_time.html">Graph of running totals</a></p></li>'
		else
			over_time_link=''
		fi

		cat <<- EOF
			<h2>Overall rankings and statistics</h2>
			<ul>
			<li><p><a href="local_score.html">Local score</a></p></li>
			<li><p><a href="mod_local_score.html">Modified local score</a></p></li>
			$histo_link
			$over_time_link
			</ul>
			<h2>Graphs and rankings per day and star</h2>
			<div>
			<table class="listleft">
		EOF

		local re='day([[:digit:]]+)star([12])'
		local remark1 remark2
		local fname
		for fname in "docs/$year"/day*star*.html; do
			[[ $fname =~ $re ]]
			local day=${BASH_REMATCH[1]}
			local star=${BASH_REMATCH[2]}

			local isempty
			if [[ ! -s ${fname%.html}.tsv ]]; then
				isempty='<sup>*</sup>'
				remark1='<p><sup>*</sup>Day with no results yet</p>'
				daylink="Day ${day#0}"
			elif [[ ! -f docs/$year/day${day}subm.svg ]]; then
				isempty='<sup>+</sup>'
				remark2='<p><sup>+</sup>Day without submissions in the first 24 hours</p>'
				daylink="Day ${day#0}"
			else
				isempty=''
				daylink="<a href=\"day${day}subm.html\">Day ${day#0}</a>"
			fi

			if ((10#$day == 14 && star == 1)); then
				echo '</table><table class="listright">'
			fi

			if ((star == 1)); then
				cat <<- EOF
					<tr>
					<td class="day">$isempty$daylink</td>
					<td><a href="${fname##*/}">Star 1</a></td>
				EOF
			elif ((star == 2)); then
				cat <<- EOF
					<td><a href="${fname##*/}">Star 2</a></td>
					</tr>
				EOF
			fi
		done

		cat <<- EOF
			</table>
			</div>
			<div class="vertsep"></div>
			$remark1
			$remark2
			<p><a href="../index.html">Return to index</a></p>
			<p>
				Suggest more stats in the <a href="https://github.com/bewuethr/aoc-stats/issues">issue tracker</a>
			</p>
			<p class="tstamp">Last updated $(date)</p>
		EOF
	} | tidy "${tidyopts[@]}" > "docs/$year/index.html"
}

gen_main_index()  {
	{
		print_header "Advent of Code, IX Stats"

		echo '<table>'
		for year in 201?; do
			cat <<- EOF
				<tr><td class="year"><a href="$year/index.html">Rankings for $year</a></td></tr>
			EOF
		done

		cat <<- EOF
			</table>
			<p>
				Suggest more stats in the <a href="https://github.com/bewuethr/aoc-stats/issues">issue tracker</a>
			</p>
			<p class="tstamp">Last updated $(date)</p>
		EOF
	} | tidy "${tidyopts[@]}" > docs/index.html
}

push_changes()  {
	local status
	status=$(git status --porcelain index.html 201?)
	if [[ -n $status ]]; then
		git add docs
		git commit -m "Update rankings"
		git push --quiet
	else
		echo "No changes, not pushing anything" >&2
	fi
}

shopt -s globstar

while getopts ":dfpv" opt; do
	case $opt in
		d) debug='yes' ;;
		f) fetch='yes' ;;
		p) push='yes' ;;
		v) verbose='yes' ;;
		\?) echo "Invalid option: -$OPTARG" >&2 && exit 1 ;;
	esac
done

tidyopts=(-iq --tidy-mark no --wrap 120)

[[ $verbose ]] && date
[[ -n $fetch ]] && git pull --quiet

for yearpath in docs/201?; do
	year=${yearpath##*/}
	if [[ -n $fetch ]]; then
		if ! update_json "$year"; then
			[[ $verbose ]] && echo "$year has not changed, skipping" >&2
			continue
		fi
	fi
	[[ $verbose ]] && echo "Building $year" >&2
	gen_histogram "$year"
	./buildlgraph "$year"
	gen_submission_stamps "$year"
	gen_tsv_files "$year"
	gen_subm_graphs "$year"
	gen_local_score "$year"
	gen_mod_local_score "$year"
	gen_html_files "$year"
	gen_index "$year"
	gen_main_flag='yes'
done

[[ -n $gen_main_flag ]] && gen_main_index

[[ $debug == 'yes' ]] || rm -rf ./**/*.tsv

[[ -n $push ]] && push_changes
